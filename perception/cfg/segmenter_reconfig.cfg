#!/usr/bin/env python
PACKAGE = "segmenter_reconfig"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("enable_voxel_grid",   bool_t,   0, "Enable VoxelGrid filtering",  False)
gen.add("leaf_size", double_t, 0, "VoxelGrid filter leaf size", 0.01, 0.01, 0.1)
gen.add("enable_ground_removal",   bool_t,   0, "Enable SAC based ground removal",  False)
gen.add("sac_threshold", double_t, 0, "SAC distance threshold (m)", 0.01, 0.01, 0.3)
gen.add("sac_eps_angle", int_t, 0, "SAC normal angular eps (deg)", 30, 1, 60)
gen.add("enable_passthrough",   bool_t,   0, "Enable passthrough filtering",  True)
gen.add("z_min", double_t, 0, "Minimum z for passthrough filtering (m)", 0.1, 0.0, 2.0)
gen.add("z_max", double_t, 0, "Maximum z for passthrough filtering (m)", 1.8, 0.0, 2.0)
gen.add("enable_shadow_filtering",   bool_t,   0, "Enable shadow filtering",  False)
gen.add("normal_radius", double_t, 0, "Normal estimation nearest neighbor search radius (m)", 0.2, 0.01, 0.2)
gen.add("shadow_threshold", double_t, 0, "Shadow removal threshold (m)", 1, 0.05, 1)
gen.add("enable_projection",   bool_t,   0, "Enable projection of points onto the ground",  True)
gen.add("enable_clustering",   bool_t,   0, "Enable euclidean clustering",  False)
gen.add("cluster_tolerance", double_t, 0, "Euclidean clustering cluster tolerance (m)", 0.1, 0.01, 1)
gen.add("min_cluster_size", int_t, 0, "Euclidean clustering minimum cluster size", 20, 1, 10000)
gen.add("max_cluster_size", int_t, 0, "Euclidean clustering maximum cluster size", 500, 1, 10000)

# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "segmenter_reconfig", "ObjectSegmenter"))